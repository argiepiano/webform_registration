<?php
/**
 * @file
 *   Webform_registration module install/schema hooks.
 */

/**
 * Implements hook_schema().
 */
function webform_registration_schema() {
  $schema = array();

  $schema['webform_registration'] = array(
    'description' => 'Table for storing user registration fields for webform nodes.',
    'fields' => array(
      'nid' => array(
        'description' => 'The node identifier of a webform',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'Boolean value for whether the form should generate users.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'description' => 'Source field for the username. References to a component in that particular webform',
        'type' => 'varchar',
        'length' => 255,
      ),
      'mail' => array(
        'description' => 'Source field for the user\'s email. References to a component in that particular webform',
        'type' => 'varchar',
        'length' => 255,
      ),
      'mail_confirm' => array(
        'description' => 'Source field for the user\'s email confirmation. References to a component in that particular webform',
        'type' => 'varchar',
        'length' => 255,
      ),
      'pass' => array(
        'description' => 'Source field for the user\'s password. Reference to a component in that particular webform',
        'type' => 'varchar',
        'length' => 255,
      ),
      'pass_confirm' => array(
        'description' => 'Source field for the user\'s password. Reference to a component in that particular webform',
        'type' => 'varchar',
        'length' => 255,
      ),
      'theme_override' => array(
        'description' => 'Boolean value for whether page-registration.tpl.php should be used instead of page.tpl.php.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'account_fields' => array(
        'description' => 'Serialized array of user fields containing their respective references to webform components',
        'type' => 'text',
      ),
      'opt_in' => array(
        'type' => 'varchar',
        'length' => 255,
        'description' => 'Source field indicating user opts in for automatic registration'
      ),
      'opt_in_value' => array(
        'type' => 'varchar',
        'length' => 255,
        'description' => 'Source field value indicating opts in for automatic registration'
      ),
      'roles' => array(
        'type' => 'text',
        'description' => 'Serialized array of user roles to assign new user to'
      ),
      'status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'Source field indicating default status for new users.',
      ),
    ),
    'primary key' => array('nid'),
  );
  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function webform_registration_update_last_removed() {
  return 7103;
}

/**
 * Implements hook_update_N().
 * 
 * Redact any passwords from webform registration tables.
 */

function webform_registration_update_1000(&$sandbox) {
  $config = config('webform_registration.settings');

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_nid'] = 0;
    $sandbox['max'] = db_query("SELECT count(*) FROM webform_registration WHERE pass != '<auto>' OR pass_confirm != '<none>'")->fetchField();
  }

  if (empty($sandbox['max'])) {
    $sandbox['#finished'] = 1;
    return t('No passwords to update.');
  }

  $query = "SELECT wr.nid, wc_pass.cid as pass_cid, wc_confirm.cid as confirm_cid FROM webform_registration wr
    LEFT JOIN webform_component wc_pass ON wc_pass.form_key = wr.pass
    LEFT JOIN webform_component wc_confirm ON wc_confirm.form_key = wr.pass_confirm
    WHERE (pass != '<auto>' OR pass_confirm != '<none>') AND wr.nid > :nid
    ORDER BY nid ASC
    LIMIT 3";
  $webforms = db_query($query, array(':nid' => $sandbox['current_nid']));

  foreach ($webforms as $webform) {
    $sandbox['current_nid'] = $webform->nid;
    db_query("UPDATE webform_submitted_data
      SET data = '[REDACTED]'
      WHERE nid = :nid
        AND cid IN (:cids)", array(
          ':nid' => $webform->nid, 
          ':cids' => array($webform->pass_cid, $webform->confirm_cid)));
    $sandbox['progress']++;
  }
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  if ($sandbox['#finished'] >= 1) {
    return t('Password update complete.');
  }
  return t('Updated !n of !max passwords.', array('!n' => $sandbox['progress'], '!max' => $sandbox['max']));
}

/**
 * Implements hook_install().
 */
function webform_registration_install() {
  // Dynamically generated variable data was detected.
}
